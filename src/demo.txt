<button class="btn btn-success" >Save</button>
<i class="fa fa-handshake-o" aria-hidden="true"></i>

<!-- 
<button class="btn btn-success" >Save</button>

<button><i class="fa fa-address-book" aria-hidden="true"></i></button>

<i class="fa fa-handshake-o" aria-hidden="true"></i> -->
 
<ul ngbNav #nav="ngbNav" class="nav-tabs">
    <li ngbNavItem>
      <a ngbNavLink>First</a>
      <ng-template ngbNavContent>First content</ng-template>
    </li>
    <li ngbNavItem>
      <a ngbNavLink>Second</a>
      <ng-template ngbNavContent>Second content</ng-template>
    </li>
    <li ngbNavItem>
        <a ngbNavLink>Third</a>
        <ng-template ngbNavContent>Third content</ng-template>
      </li>
  </ul>
  <div [ngbNavOutlet]="nav"></div> 

  <!-- <i data-feather="circle"></i>
  <i data-feather="align-center"></i> -->

  <app-feather-icon icon="circle" ></app-feather-icon>
  <p>Ajeet</p>
  <app-feather-icon icon="align-center"></app-feather-icon>

  <button>  <app-feather-icon icon="align-center"></app-feather-icon></button>

  <button></button>




  ====================



  import { Component } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
// import * as feather from 'feather-icons';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'backend';
  constructor(private _toastr: ToastrService) {

  }

  ngOnInit() {
    // feather.replace();

     this._toastr.success("Data Saved !!", "User Master");
    // this._toastr.error("Error Occured !!", "User Master");
    // this._toastr.warning("Please update email id first !!", "User Master");
    // this._toastr.info("Good job !!", "User Master");

    // var res = "Hello Ajeet";
    // this._toastr.success(res, "User Master");

    //confirm("Are you sure want ot delete ?");


    //Swal.fire('Any fool can use a computer')
    // Swal.fire(
    //   'The Internet?',
    //   'That thing is still around?',
    //   'question'
    // )


    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: 'btn btn-success',
        cancelButton: 'btn btn-danger'
      },
      buttonsStyling: false
    })

    swalWithBootstrapButtons.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'No, cancel!',
      reverseButtons: true
    }).then((result) => {
      if (result.isConfirmed) {
        swalWithBootstrapButtons.fire(
          'Deleted!',
          'Your file has been deleted.',
          'success'
        )
      } else if (
        /* Read more about handling dismissals below */
        result.dismiss === Swal.DismissReason.cancel
      ) {
        swalWithBootstrapButtons.fire(
          'Cancelled',
          'Your imaginary file is safe :)',
          'error'
        )
      }
    })

  }
}




=====================


import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { FeatherIconComponent } from './feather-icon/feather-icon.component';
import { ToastrModule } from 'ngx-toastr';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

@NgModule({
  declarations: [
    AppComponent,
    FeatherIconComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    NgbModule,
    ToastrModule.forRoot()
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }



===============

<i [attr.data-feather]="feathericon"></i>

import { Component, Input, OnInit } from '@angular/core';
import * as feather from 'feather-icons';

@Component({
  selector: 'app-feather-icon',
  templateUrl: './feather-icon.component.html',
  styleUrls: ['./feather-icon.component.scss']
})
export class FeatherIconComponent implements OnInit {

  @Input('icon') feathericon: any;

  constructor() { }

  ngOnInit(): void {
   
  }

  ngAfterViewInit(){
    feather.replace();
  }

}



====================================================================================================

import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { CharFieldValidator,NowWhiteSpaceValidator } from 'src/app/shared/Validators/Validation.validators';
import { HttpService } from 'src/app/shared/services/http.service';
import { DbOperation } from 'src/app/shared/utility/db-operation';
import { environment } from 'src/environments/environments.prod';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-size',
  templateUrl: './size.component.html',
  styleUrls: ['./size.component.scss'],
})
export class SizeComponent implements OnInit,OnDestroy {
  addForm: FormGroup;
  buttonText: string;
  dbOps: DbOperation;
  objRows: any[] = [];
  objRow: any;

  @ViewChild('nav') elnav: any;
  formErrors= {
    name : ''
  };
validationMessage={
  name: {
    required: 'Name is required',
    minlength: 'Name can not be less than 1 char',
    maxlength: 'Name can not be more thasn 10 char',
    validCharField:'Name Char and Space only',
    NowWhiteSpaceValidator:' only whiteSpace not allow'
  }
};

  constructor(
    private _httpServices: HttpService,
    private _toastr: ToastrService,
    private _fb: FormBuilder
  ) {}

  ngOnInit(): void {
    this.setFormState();
    this.getData();
  }
  setFormState() {
    this.buttonText = 'Add';
    this.dbOps = DbOperation.create;
    this.addForm = this._fb.group({
      id: [0],
      name: [
        '',
        Validators.compose([
          Validators.required,
          Validators.minLength(1),
          Validators.maxLength(10),
          CharFieldValidator.validCharField,
          NowWhiteSpaceValidator.nowWhiteSpaceValidator,
        ]),
      ],
    });
    this.addForm.valueChanges.subscribe(() =>{
  this.onValueChange();
    })
  }
    onValueChange(){
if(!this.addForm){
return;
}
  for (const field of Object.keys(this.formErrors)){
 this.formErrors[field]="";
 const control = this.addForm.get(field);
 if(control && control.dirty && control.invalid){
const message = this.validationMessage[field];

for(const key of Object.keys(control.errors)){
  if(key !== 'required'){
    this.formErrors[field] += message[key] + " ";
  }
}
 }

  }
 }
  get ctrl() {
    return this.addForm.controls;
  }

  Submit() {
    if (this.addForm.invalid) {
      return;
    }
    switch (this.dbOps) {
      case DbOperation.create:
        this._httpServices
          .post(
            environment.BASE_API_PATH + 'SizeMaster/Save',
            this.addForm.value
          )
          .subscribe((res) => {
            if (res.isSuccess) {
              this._toastr.success('Record Saved !!', 'MasterSize');
            } else {
              this._toastr.error(res.errors[0], 'SizeMaster');
            }
          });
        break;
      case DbOperation.update:
        this._httpServices
          .post(
            environment.BASE_API_PATH + 'SizeMaster/Update',
            this.addForm.value
          )
          .subscribe((res) => {
            if (res.isSuccess) {
              this._toastr.success('Record Saved !!', 'MasterSize');
            } else {
              this._toastr.error(res.errors[0], 'SizeMaster');
            }
          });
        break;
    }
  }

  resetForm() {
    this.addForm.reset({
      id: 0,
      name: '',
    });
    this.buttonText = 'Add';
    this.dbOps = DbOperation.create;
    this.getData();
    this.elnav.select('viewtab');
  }

  cancelForm() {
    this.addForm.reset({
      id: 0,
      name: '',
    });
    this.buttonText = 'Add';
    this.dbOps = DbOperation.create;
    this.elnav.select('viewtab');
  }
  getData() {
    this._httpServices
      .get(environment.BASE_API_PATH + 'SizeMater/getAll')
      .subscribe((res) => {
        if (res.isSuccess) {
          this.objRows = res.data;
        } else {
          this._toastr.error(res.errors[0], 'Size Master');
        }
      });
  }

  Edit(id: number) {
    this.buttonText = 'Update';
    this.dbOps = DbOperation.update;
    this.elnav.select('addtab');
    this.objRow = this.objRows.find((x) => x.id == id);
    this.addForm.patchValue(this.objRow);
  }
  Delete(id: number) {
    let obj ={
      id: id
    };
    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: 'btn btn-success',
        cancelButton: 'btn btn-danger'
      },
      buttonsStyling: false
    })

    swalWithBootstrapButtons.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'No, cancel!',
      reverseButtons: true
    }).then((result) => {
      if (result.isConfirmed) {
        this._httpServices
        .post(environment.BASE_API_PATH + "SizeMater/Delete/" ,obj)
        .subscribe((res) => {
          if (res.isSuccess) {
            swalWithBootstrapButtons.fire(
              'Deleted!',
              'Your Record has been deleted.',
              'success'
            )
          //  this._toastr.success("Record Deleted !!" , "SizeMaster" );
           this.getData();
          } else {
            this._toastr.error(res.errors[0], 'Size Master');
          }
        });
        
      } else if (
        /* Read more about handling dismissals below */
        result.dismiss === Swal.DismissReason.cancel
      ) {
        swalWithBootstrapButtons.fire(
          'Cancelled',
          'Your imaginary file is safe :)',
          'error'
        )
      }
    })
  }

  ngOnDestroy() {
    this.objRows = null;
    this.objRow = null;
  }

  tabChange(event: any) {
    this.addForm.reset({
      id: 0,
      name: '',
    });
    this.buttonText = 'Add';
    this.dbOps = DbOperation.create;
  }
}
